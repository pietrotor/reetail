/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Current-Payment
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams,
  HTTPValidationError
} from '../../model';

import { customFetch } from '../../../mutator/custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create Link Token
 */
export const createLinkTokenApiV1PlaidCreateLinkTokenPost = (
    params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<unknown>(
      {url: `/api/v1/plaid/create-link-token/`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getCreateLinkTokenApiV1PlaidCreateLinkTokenPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>, TError,{params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>, TError,{params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams}, TContext> => {
    
const mutationKey = ['createLinkTokenApiV1PlaidCreateLinkTokenPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>, {params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams}> = (props) => {
          const {params} = props ?? {};

          return  createLinkTokenApiV1PlaidCreateLinkTokenPost(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLinkTokenApiV1PlaidCreateLinkTokenPostMutationResult = NonNullable<Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>>
    
    export type CreateLinkTokenApiV1PlaidCreateLinkTokenPostMutationError = HTTPValidationError

    /**
 * @summary Create Link Token
 */
export const useCreateLinkTokenApiV1PlaidCreateLinkTokenPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>, TError,{params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof createLinkTokenApiV1PlaidCreateLinkTokenPost>>,
        TError,
        {params: CreateLinkTokenApiV1PlaidCreateLinkTokenPostParams},
        TContext
      > => {

      const mutationOptions = getCreateLinkTokenApiV1PlaidCreateLinkTokenPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    