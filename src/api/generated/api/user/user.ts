/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Current-Payment
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  BodyLoginForAccessTokenApiV1AuthTokenPost,
  CreateUserApiV1AuthCreateUsersPostParams,
  HTTPValidationError,
  UserResponseSchema,
  UserUpdateSchema
} from '../../model';

import { customFetch } from '../../../mutator/custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create User
 */
export const createUserApiV1AuthCreateUsersPost = (
    params: CreateUserApiV1AuthCreateUsersPostParams,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      
      return customFetch<UserResponseSchema>(
      {url: `/api/v1/auth/create-users/`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getCreateUserApiV1AuthCreateUsersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>, TError,{params: CreateUserApiV1AuthCreateUsersPostParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>, TError,{params: CreateUserApiV1AuthCreateUsersPostParams}, TContext> => {
    
const mutationKey = ['createUserApiV1AuthCreateUsersPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>, {params: CreateUserApiV1AuthCreateUsersPostParams}> = (props) => {
          const {params} = props ?? {};

          return  createUserApiV1AuthCreateUsersPost(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateUserApiV1AuthCreateUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>>
    
    export type CreateUserApiV1AuthCreateUsersPostMutationError = HTTPValidationError

    /**
 * @summary Create User
 */
export const useCreateUserApiV1AuthCreateUsersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>, TError,{params: CreateUserApiV1AuthCreateUsersPostParams}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof createUserApiV1AuthCreateUsersPost>>,
        TError,
        {params: CreateUserApiV1AuthCreateUsersPostParams},
        TContext
      > => {

      const mutationOptions = getCreateUserApiV1AuthCreateUsersPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Update User
 */
export const updateUserApiV1AuthUpdateUserUserIdPut = (
    userId: number,
    userUpdateSchema: UserUpdateSchema,
 options?: SecondParameter<typeof customFetch>,) => {
      
      
      return customFetch<UserResponseSchema>(
      {url: `/api/v1/auth/update-user/${encodeURIComponent(String(userId))}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateSchema
    },
      options);
    }
  


export const getUpdateUserApiV1AuthUpdateUserUserIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>, TError,{userId: number;data: UserUpdateSchema}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>, TError,{userId: number;data: UserUpdateSchema}, TContext> => {
    
const mutationKey = ['updateUserApiV1AuthUpdateUserUserIdPut'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>, {userId: number;data: UserUpdateSchema}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateUserApiV1AuthUpdateUserUserIdPut(userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserApiV1AuthUpdateUserUserIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>>
    export type UpdateUserApiV1AuthUpdateUserUserIdPutMutationBody = UserUpdateSchema
    export type UpdateUserApiV1AuthUpdateUserUserIdPutMutationError = HTTPValidationError

    /**
 * @summary Update User
 */
export const useUpdateUserApiV1AuthUpdateUserUserIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>, TError,{userId: number;data: UserUpdateSchema}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateUserApiV1AuthUpdateUserUserIdPut>>,
        TError,
        {userId: number;data: UserUpdateSchema},
        TContext
      > => {

      const mutationOptions = getUpdateUserApiV1AuthUpdateUserUserIdPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Login For Access Token
 */
export const loginForAccessTokenApiV1AuthTokenPost = (
    bodyLoginForAccessTokenApiV1AuthTokenPost: BodyLoginForAccessTokenApiV1AuthTokenPost,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyLoginForAccessTokenApiV1AuthTokenPost.grant_type !== undefined && bodyLoginForAccessTokenApiV1AuthTokenPost.grant_type !== null) {
 formUrlEncoded.append('grant_type', bodyLoginForAccessTokenApiV1AuthTokenPost.grant_type)
 }
formUrlEncoded.append('username', bodyLoginForAccessTokenApiV1AuthTokenPost.username)
formUrlEncoded.append('password', bodyLoginForAccessTokenApiV1AuthTokenPost.password)
if(bodyLoginForAccessTokenApiV1AuthTokenPost.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLoginForAccessTokenApiV1AuthTokenPost.scope)
 }
if(bodyLoginForAccessTokenApiV1AuthTokenPost.client_id !== undefined && bodyLoginForAccessTokenApiV1AuthTokenPost.client_id !== null) {
 formUrlEncoded.append('client_id', bodyLoginForAccessTokenApiV1AuthTokenPost.client_id)
 }
if(bodyLoginForAccessTokenApiV1AuthTokenPost.client_secret !== undefined && bodyLoginForAccessTokenApiV1AuthTokenPost.client_secret !== null) {
 formUrlEncoded.append('client_secret', bodyLoginForAccessTokenApiV1AuthTokenPost.client_secret)
 }

      return customFetch<unknown>(
      {url: `/api/v1/auth/token`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      options);
    }
  


export const getLoginForAccessTokenApiV1AuthTokenPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>, TError,{data: BodyLoginForAccessTokenApiV1AuthTokenPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>, TError,{data: BodyLoginForAccessTokenApiV1AuthTokenPost}, TContext> => {
    
const mutationKey = ['loginForAccessTokenApiV1AuthTokenPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>, {data: BodyLoginForAccessTokenApiV1AuthTokenPost}> = (props) => {
          const {data} = props ?? {};

          return  loginForAccessTokenApiV1AuthTokenPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginForAccessTokenApiV1AuthTokenPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>>
    export type LoginForAccessTokenApiV1AuthTokenPostMutationBody = BodyLoginForAccessTokenApiV1AuthTokenPost
    export type LoginForAccessTokenApiV1AuthTokenPostMutationError = HTTPValidationError

    /**
 * @summary Login For Access Token
 */
export const useLoginForAccessTokenApiV1AuthTokenPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>, TError,{data: BodyLoginForAccessTokenApiV1AuthTokenPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof loginForAccessTokenApiV1AuthTokenPost>>,
        TError,
        {data: BodyLoginForAccessTokenApiV1AuthTokenPost},
        TContext
      > => {

      const mutationOptions = getLoginForAccessTokenApiV1AuthTokenPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    