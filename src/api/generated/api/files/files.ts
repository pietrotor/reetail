/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Current-Payment
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  BodyUploadFileEndpointApiV1FilesUploadPost,
  HTTPValidationError
} from '../../model';

import { customFetch } from '../../../mutator/custom-fetch';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Upload File Endpoint
 */
export const uploadFileEndpointApiV1FilesUploadPost = (
    bodyUploadFileEndpointApiV1FilesUploadPost: BodyUploadFileEndpointApiV1FilesUploadPost,
 options?: SecondParameter<typeof customFetch>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('file', bodyUploadFileEndpointApiV1FilesUploadPost.file)

      return customFetch<unknown>(
      {url: `/api/v1/files/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getUploadFileEndpointApiV1FilesUploadPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>, TError,{data: BodyUploadFileEndpointApiV1FilesUploadPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>, TError,{data: BodyUploadFileEndpointApiV1FilesUploadPost}, TContext> => {
    
const mutationKey = ['uploadFileEndpointApiV1FilesUploadPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>, {data: BodyUploadFileEndpointApiV1FilesUploadPost}> = (props) => {
          const {data} = props ?? {};

          return  uploadFileEndpointApiV1FilesUploadPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadFileEndpointApiV1FilesUploadPostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>>
    export type UploadFileEndpointApiV1FilesUploadPostMutationBody = BodyUploadFileEndpointApiV1FilesUploadPost
    export type UploadFileEndpointApiV1FilesUploadPostMutationError = HTTPValidationError

    /**
 * @summary Upload File Endpoint
 */
export const useUploadFileEndpointApiV1FilesUploadPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>, TError,{data: BodyUploadFileEndpointApiV1FilesUploadPost}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationResult<
        Awaited<ReturnType<typeof uploadFileEndpointApiV1FilesUploadPost>>,
        TError,
        {data: BodyUploadFileEndpointApiV1FilesUploadPost},
        TContext
      > => {

      const mutationOptions = getUploadFileEndpointApiV1FilesUploadPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    